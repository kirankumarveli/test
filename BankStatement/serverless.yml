# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: bankstatement-demo
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
# custom:
#   dynamodb:
#     start:
#       port: 8000
#       migrate: true
#       inMemory: true
provider:
  name: aws
  runtime: nodejs10.x
  region:  us-east-1
#   region: ap-south-1
  profile: default


  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem

      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:*"
     


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  app:
    handler: handler.Expenses_TransactionType_Details
    events:
    #  - http: 
    #         path: download_Expenses_Claim_Templete
    #         method: get
    #         cors: true 
    #  - http: 
    #         path: get_expenses_Claim
    #         method: get
    #         cors: true             
    #  - http: 
    #         path: claim_upload
    #         method: post
    #         cors: true            
    #  - http: 
    #         path: createExpenseClaimConfig
    #         method: post
    #         cors: true
    #  - http: 
    #         path: expenseClaimItems
    #         method: get
    #         cors: true 
     #   - http: 
     #        path: createClaimExpense
     #        method: post
     #        cors: true  
       - http: 
            path: masterclaimExpenses
            method: post
            cors: true  
       - http: 
            path: getClaimData
            method: get
            cors: true  
   
       - http: 
            path: availableTravelExpenseGroups
            method: get
            cors: true 
       - http: 
            path: updateUser
            method: post
            cors: true
       - http: 
            path: getallUsers
            method: get
            cors: true    
       - http: 
            path: getMasterUser
            method: get
            cors: true    
       - http: 
            path: save_Advance_for_expense
            method: post
            cors: true   
       - http: 
            path: getAdvExpId
            method: post
            cors: true   
       - http: 
            path: get_advance_for_expense
            method: get
            cors: true    
       - http: 
            path: save_claim_for_expense
            method: post
            cors: true
       - http: 
            path: get_claim_for_expense
            method: get
            cors: true
       - http: 
            path: savePendingClaims
            method: post
            cors: true
       - http: 
            path: get_savePendingClaims
            method: get
            cors: true
       - http: 
            path: userClaims_Transactions
            method: post
            cors: true             
       - http: 
            path: userAdvance_ForExpenseItems
            method: post
            cors: true   
       - http: 
            path: getclaimgstdata
            method: post
            cors: true
       - http: 
            path: getAvailableUnsetteled_ExpensesAdvances
            method: post
            cors: true   
       - http: 
            path: getdisplayUnsettledAdvances
            method: post
            cors: true   
       - http: 
            path: getUnsettledAdvances
            method: post
            cors: true   
       - http: 
            path: getreimbursement
            method: get
            cors: true   
       - http: 
            path: bankAccountsForPayment
            method: post
            cors: true   
       - http: 
            path: cashPayNow
            method: post
            cors: true   
       - http: 
            path: bankPayNow
            method: post
            cors: true   
       - http: 
            path: getPaidEmployeeClaims
            method: get
            cors: true 
       - http: 
            path: getPendingEmployeeClaims
            method: get
            cors: true   
       - http: 
            path: request_Advance_for_expense
            method: post
            cors: true           
       - http: 
            path: settle_Advance_for_expense 
            method: post
            cors: true                              
       - http: 
            path: claim_submitForApprovals
            method: post
            cors: true                              
       - http: 
            path: createTable
            method: post
            cors: true                              
                         
             
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
plugins:
  - serverless-offline
  - serverless-apigw-binary
    
custom:
     apigwBinary:
       types:           #list of mime-types 
         - 'multipart/form-data'
         - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
 

 